{"version":3,"sources":["assets/img/answer.png","assets/img/fiftyFifty.PNG","assets/img/hints.PNG","assets/img/options.PNG","assets/sound/correct-answer.mp3","assets/sound/wrong-answer.mp3","assets/sound/button-sound.mp3","components/Home.js","components/quiz/QuizInstructions.js","utils/is-empty.js","components/quiz/Play.js","components/quiz/QuizSummary.js","App.js","index.js"],"names":["module","exports","Home","Fragment","Helmet","id","style","textAlign","className","to","QuizInstructions","src","options","alt","answer","fiftyFifty","hints","isEmpty","value","undefined","Object","keys","length","trim","Play","props","displayQuestions","questions","state","currentQuestion","nextQuestion","previousQuestion","currentQuestionIndex","setState","numberOfQuestions","previousRandomNumbers","showOptions","handleDisableButton","handleOptionClick","event","target","innerHTML","toLowerCase","setTimeout","correctSound","current","play","correctAnswer","wrongSound","wrongAnswer","handleNextButtonClick","playButtonSound","prevState","question","handlePreviousButtonClick","handleQuitButtonClick","window","confirm","history","push","handleButtonClick","buttonSound","M","toast","html","classes","displayLength","score","correctAnswers","numberOfAnsweredQuestions","endGame","navigator","vibrate","wrongAnswers","Array","from","document","querySelectorAll","forEach","option","visibility","usedFiftyFifty","handleHints","indexOfAnswer","index","randomNumber","Math","round","random","includes","concat","handleFiftyFifty","randomNumbers","count","newRandomNumber","startTimer","countdownTime","Date","now","interval","setInterval","distance","minutes","floor","seconds","clearInterval","time","previousButtonDisabled","nextButtonDisabled","alert","playerStats","fiftyFiftyUsed","hintsUsed","console","log","React","createRef","this","ref","correctNotification","wrongNotification","buttonNotification","onClick","float","optionA","optionB","optionC","optionD","classnames","Component","QuizSummary","location","stats","remark","userScore","toFixed","App","path","exact","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.07bc4c23.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/answer.f05e37d5.png\";","module.exports = __webpack_public_path__ + \"static/media/fiftyFifty.f06f3bfe.PNG\";","module.exports = __webpack_public_path__ + \"static/media/hints.145bf217.PNG\";","module.exports = __webpack_public_path__ + \"static/media/options.0ab14d14.PNG\";","module.exports = __webpack_public_path__ + \"static/media/correct-answer.ee6aadae.mp3\";","module.exports = __webpack_public_path__ + \"static/media/wrong-answer.c7106542.mp3\";","module.exports = __webpack_public_path__ + \"static/media/button-sound.32194199.mp3\";","import React from 'react';\r\nimport { Helmet } from 'react-helmet'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Home = () => (\r\n    <React.Fragment>\r\n        <Helmet>\r\n            <title>QuizApp - Home</title>\r\n        </Helmet>\r\n        <div id=\"home-wrap\">\r\n            <section>\r\n                <div style={{ textAlign: 'center' }}>\r\n                    <span className=\"mdi mdi-cube-outline cube 48px\"></span>\r\n                </div>\r\n                <h1>Quiz App</h1>\r\n                <div className=\"play-button-container\">\r\n                    <ul>\r\n                        <li>\r\n                            <Link className=\"play-button\" to=\"/play/instructions\">Play</Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"auth-container\">\r\n                    <Link className=\"auth-buttons\" id=\"login-button\" to=\"/login\">Login</Link>\r\n                    <Link className=\"auth-buttons\" id=\"register-button\" to=\"/register\">Register</Link>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    </React.Fragment>\r\n    \r\n);\r\n\r\nexport default Home;\r\n","import React, { Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet';\r\nimport answer from '../../assets/img/answer.png';\r\nimport fiftyFifty from '../../assets/img/fiftyFifty.PNG';\r\nimport hints from '../../assets/img/hints.PNG';\r\nimport options from '../../assets/img/options.PNG';\r\n\r\nconst QuizInstructions = () => (\r\n    <Fragment>\r\n        <Helmet>\r\n            <title>Quiz Instructions - Quiz App</title>\r\n        </Helmet>\r\n        <div className=\"instructions-wrap container\">\r\n            <h1>How to play the game?</h1>\r\n            <p>Ensure you read this guide from start to finish.</p>\r\n            <ul id=\"main-list\" className=\"browser-default\">\r\n                <li>The game has a duration of 15 minutes and ends as soon as your time elapses.</li>\r\n                <li>Each game consist of 15 questions.</li>\r\n                <li>\r\n                    Every question contains 4 options\r\n                    <img src={options} alt=\"Quiz App - Options example\" />\r\n                </li>\r\n                <li>\r\n                    Select the option which best answers provided question by clicking (or selecting) it.\r\n                    <img src={answer} alt=\"Quiz App - Answer example\" />\r\n                </li>\r\n                <li>\r\n                    Each game has 2 lifelines namely:\r\n                    <ul id=\"sublist\">\r\n                        <li>50/50 chances</li>\r\n                        <li>5 Hints</li>\r\n                    </ul>\r\n                </li>\r\n                <li>\r\n                    Selecting a 50/50 lifeline by clicking the \r\n                    \" <span className=\"mdi mdi-set-center mdi-24px lifeline-icon\"></span> \" \r\n                    icon will remove 2 wrong answers,\r\n                    leaving one wrong and a correct one. <br />\r\n                        <img src={fiftyFifty} alt=\"Quiz App - 50/50 example\" />\r\n                </li>\r\n                <li>\r\n                    Using a hint by clicking the\r\n                    \" <span className=\"mdi mdi-lightbulb-on mdi-24px lifeline-icon\"></span> \"\r\n                    icon will remove one wrong answer,\r\n                    leaving two wrong answers and a correct one.\r\n                    You can use as many hints as possible on a single question.<br />\r\n                    <img src={hints} alt=\"Quiz App - Hints example\" />\r\n                </li>\r\n                <li>\r\n                    Feel free to quit (or forfeit) from the game at any time. In that case your score\r\n                    will be revealed afterwards.\r\n                </li>\r\n                <li>\r\n                    The timer starts as soon as the game loads.\r\n                </li>\r\n                <li>\r\n                    Let's do this if you think you've got what it takes?\r\n                </li>\r\n            </ul>\r\n            <div>\r\n                <span className=\"left\">\r\n                    <Link to=\"/\">No, take me back!</Link>\r\n                </span>\r\n                <span className=\"right\">\r\n                    <Link to=\"/play/quiz\">Okay, let's do this!</Link>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    </Fragment>\r\n);\r\n\r\nexport default QuizInstructions;","const isEmpty = (value) => value === undefined || \r\n                         value === null ||\r\n                         (typeof value === 'object' && Object.keys(value).length === 0) ||\r\n                         (typeof value === 'string' && value.trim().length === 0)\r\n\r\nexport default isEmpty;","import React, { Component, Fragment } from 'react'\r\nimport Helmet from 'react-helmet';\r\nimport M from 'materialize-css';\r\nimport classnames from 'classnames';\r\n\r\nimport questions from '../../questions.json';\r\nimport isEmpty from '../../utils/is-empty';\r\nimport correctNotification from '../../assets/sound/correct-answer.mp3';\r\nimport wrongNotification from '../../assets/sound/wrong-answer.mp3';\r\nimport buttonNotification from '../../assets/sound/button-sound.mp3';\r\n\r\nexport class Play extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            questions,\r\n            currentQuestion: {},\r\n            nextQuestion: {},\r\n            previousQuestion: {},\r\n            answer: '',\r\n            numberOfQuestions: 0,\r\n            numberOfAnsweredQuestions: 0,\r\n            currentQuestionIndex: 0,\r\n            score: 0,\r\n            correctAnswers: 0,\r\n            wrongAnswers: 0,\r\n            hints: 5,\r\n            fiftyFifty: 2,\r\n            usedFiftyFifty: false,\r\n            nextButtonDisabled: false,\r\n            previousButtonDisabled: true,\r\n            previousRandomNumbers: [],\r\n            time: {}\r\n        };\r\n        this.interval = null;\r\n        this.correctSound = React.createRef();\r\n        this.wrongSound = React.createRef();\r\n        this.buttonSound = React.createRef();\r\n    };\r\n\r\n    componentDidMount() {\r\n        const { questions, currentQuestion, nextQuestion, previousQuestion } = this.state;\r\n        this.displayQuestions(questions, currentQuestion, nextQuestion, previousQuestion);\r\n        this.startTimer();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    displayQuestions = (questions = this.state.questions, currentQuestion, nextQuestion, previousQuestion) => {\r\n        let { currentQuestionIndex } = this.state;\r\n        if(!isEmpty(this.state.questions)) {\r\n            questions = this.state.questions;\r\n            currentQuestion = questions[currentQuestionIndex];\r\n            nextQuestion = questions[currentQuestionIndex + 1];\r\n            previousQuestion = questions[currentQuestionIndex - 1];\r\n            const answer = currentQuestion.answer;\r\n            this.setState({\r\n                currentQuestion: currentQuestion,\r\n                nextQuestion,\r\n                previousQuestion,\r\n                numberOfQuestions: questions.length,\r\n                answer,\r\n                previousRandomNumbers: []\r\n             }, () => {\r\n                 this.showOptions();\r\n                 this.handleDisableButton();\r\n             });\r\n        }\r\n    };\r\n\r\n    handleOptionClick = (event) => {\r\n        if(event.target.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\r\n            setTimeout(() => {\r\n                this.correctSound.current.play();\r\n            }, 500);\r\n            this.correctAnswer();\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                this.wrongSound.current.play();\r\n            }, 500)\r\n            this.wrongAnswer();\r\n        }\r\n    };\r\n\r\n    handleNextButtonClick = () => {\r\n        this.playButtonSound();\r\n        if(this.state.nextQuestion !== undefined) {\r\n            this.setState(prevState => ({\r\n                currentQuestionIndex: prevState.currentQuestionIndex + 1 \r\n            }), () => {\r\n                this.displayQuestions(this.state.question, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n            });\r\n        }\r\n    };\r\n\r\n    handlePreviousButtonClick = () => {\r\n        this.playButtonSound();\r\n        if(this.state.previousQuestion !== undefined) {\r\n            this.setState(prevState => ({\r\n                currentQuestionIndex: prevState.currentQuestionIndex - 1 \r\n            }), () => {\r\n                this.displayQuestions(this.state.question, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n            });\r\n        }\r\n    };\r\n\r\n    handleQuitButtonClick = () => {\r\n        this.playButtonSound();\r\n        if(window.confirm('Are you sure you want to quit game?')) {\r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n\r\n    handleButtonClick = (event) => {\r\n        switch(event.target.id) {\r\n            \r\n            case 'next-button':\r\n                  this.handleNextButtonClick();\r\n                  break;\r\n\r\n            case 'previous-button':\r\n                  this.handlePreviousButtonClick();\r\n                  break;\r\n\r\n            case 'quit-button':\r\n                  this.handleQuitButtonClick();\r\n                  break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    playButtonSound = () => {\r\n        this.buttonSound.current.play();\r\n    }\r\n\r\n    correctAnswer = () => {\r\n        M.toast({ \r\n            html: 'Correct Answer',\r\n            classes: 'toast-valid',\r\n            displayLength: 1500\r\n        });\r\n        this.setState(prevState => ({\r\n            score: prevState.score + 1,\r\n            correctAnswers: prevState.correctAnswers + 1,\r\n            currentQuestionIndex: prevState.currentQuestionIndex + 1,\r\n            numberOfAnsweredQuestions: prevState.numberOfAnsweredQuestions + 1\r\n        }), () => {\r\n            if(this.state.nextQuestion === undefined) {\r\n                this.endGame();\r\n            }\r\n            else {\r\n                this.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n            }\r\n        });\r\n    };\r\n\r\n    wrongAnswer = () => {\r\n        navigator.vibrate(1000);\r\n        M.toast({\r\n            html: 'Wrong Answer',\r\n            classes: 'toast-invalid',\r\n            displayLength: 1500\r\n        });\r\n        this.setState(prevState => ({\r\n            wrongAnswers: prevState.wrongAnswer + 1,\r\n            currentQuestionIndex: prevState.currentQuestionIndex + 1,\r\n            numberOfAnsweredQuestions: prevState.numberOfAnsweredQuestions + 1\r\n        }), () => {\r\n            if(this.state.nextQuestion === undefined) {\r\n                this.endGame();\r\n            } \r\n            else {\r\n                this.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n            }\r\n        });\r\n    };\r\n\r\n    showOptions = () => {\r\n        const options = Array.from(document.querySelectorAll('.option'));\r\n\r\n        options.forEach((option) => {\r\n            option.style.visibility = 'visible';\r\n        });\r\n\r\n        this.setState({\r\n            usedFiftyFifty: false\r\n        });\r\n\r\n    }\r\n\r\n    handleHints = () => {\r\n        if(this.state.hints > 0) {\r\n            const options = Array.from(document.querySelectorAll('.option'));\r\n            let indexOfAnswer;\r\n    \r\n            options.forEach((option, index) => {\r\n                if(option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\r\n                    indexOfAnswer = index;\r\n                }\r\n            });\r\n            while(true) {\r\n                const randomNumber = Math.round(Math.random() * 3);\r\n                if(randomNumber !== indexOfAnswer && !this.state.previousRandomNumbers.includes(randomNumber)) {\r\n                    options.forEach((option, index) => {\r\n                        if(index === randomNumber) {\r\n                            option.style.visibility = 'hidden';\r\n                            this.setState((prevState) => ({\r\n                                hints: prevState.hints - 1,\r\n                                previousRandomNumbers: prevState.previousRandomNumbers.concat(randomNumber)\r\n                            }));\r\n                        }\r\n                    });\r\n                    break;\r\n                }\r\n                if(this.state.previousRandomNumbers.length >= 3) break;\r\n            }\r\n        }\r\n        else if(this.state.hints === 0) {\r\n            M.toast({\r\n                html: \"You don't have any hints left.\",\r\n                classes: 'toast-hint',\r\n                displayLength: 1500\r\n            });\r\n        }\r\n    };\r\n\r\n    handleFiftyFifty = () => {\r\n        if(this.state.fiftyFifty > 0 && this.state.usedFiftyFifty === false) {\r\n            const options = document.querySelectorAll('.option');\r\n            const randomNumbers = [];\r\n            let indexOfAnswer;\r\n\r\n            options.forEach((option, index) => {\r\n                if(option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\r\n                    indexOfAnswer = index;\r\n                }\r\n            });\r\n            let count = 0;\r\n            do {\r\n                const randomNumber = Math.round(Math.random() * 3);\r\n                if(randomNumber !== indexOfAnswer) {\r\n                    if(randomNumbers.length < 2 && !randomNumbers.includes(randomNumber) && !randomNumbers.includes(indexOfAnswer)) {\r\n                        randomNumbers.push(randomNumber);\r\n                        count ++;\r\n                    }\r\n                    else {\r\n                        while(true) {\r\n                            const newRandomNumber = Math.round(Math.random() * 3);\r\n                            if(!randomNumbers.includes(newRandomNumber) && !randomNumbers.includes(indexOfAnswer)) {\r\n                                randomNumbers.push(newRandomNumber);\r\n                                count++;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            while(count < 2);\r\n            options.forEach((option, index) => {\r\n                if(randomNumbers.includes(index)) {\r\n                    option.style.visibility = 'hidden';\r\n                }\r\n            });\r\n            this.setState(prevState => ({\r\n                fiftyFifty: prevState.fiftyFifty - 1,\r\n                usedFiftyFifty: true\r\n            }));\r\n        }\r\n        else if(this.state.fiftyFifty === 0) {\r\n            M.toast({\r\n                html: \"You don't have more 50/50s left.\",\r\n                classes: 'fiftyFifty-toast',\r\n                displayLength: 1500\r\n            });\r\n        }\r\n    };\r\n\r\n    startTimer = () => {\r\n        const countdownTime = Date.now() + 180000;\r\n        this.interval = setInterval(() => {\r\n            const now = new Date();\r\n            const distance = countdownTime - now;\r\n            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n            const seconds = Math.floor((distance % (1000 * 60)) / (1000));\r\n            if(distance < 0) {\r\n                clearInterval(this.interval);\r\n                this.setState({\r\n                    time: {\r\n                        minutes: 0,\r\n                        seconds: 0\r\n                    }\r\n                }, () => {\r\n                    this.endGame();\r\n                });\r\n            }\r\n            else {\r\n                this.setState({\r\n                    time: {\r\n                        minutes,\r\n                        seconds\r\n                    }\r\n                });\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    handleDisableButton = () => {\r\n        if(this.state.previousQuestion === undefined || this.state.currentQuestionIndex === 0) {\r\n            this.setState({\r\n                previousButtonDisabled: true\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                previousButtonDisabled: false\r\n            });\r\n        }\r\n\r\n        if(this.state.nextQuestion === undefined || this.state.currentQuestionIndex + 1 === this.state.numberOfQuestions) {\r\n            this.setState({\r\n                nextButtonDisabled: true\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                nextButtonDisabled: false\r\n            });\r\n        }\r\n    };\r\n\r\n    endGame = () => {\r\n        alert(\"Game has ended.\");\r\n        const { state } = this;\r\n        const playerStats = {\r\n            score: state.score,\r\n            numberOfQuestions: state.numberOfQuestions,\r\n            numberOfAnsweredQuestions: state.correctAnswers + state.wrongAnswers,\r\n            correctAnswers: state.correctAnswers,\r\n            wrongAnswers: state.wrongAnswers,\r\n            fiftyFiftyUsed: 2 - state.fiftyFifty,\r\n            hintsUsed: 5- state.hints\r\n        };\r\n        console.log(playerStats);\r\n        setTimeout(() => {\r\n            this.props.history.push('/play/QuizSummary', playerStats);\r\n        }, 1000);\r\n    };\r\n\r\n    render() {\r\n\r\n        const { \r\n            currentQuestion, \r\n            currentQuestionIndex, \r\n            numberOfQuestions, \r\n            hints, \r\n            fiftyFifty, \r\n            time \r\n        } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Fragment>\r\n                    <Helmet>\r\n                        <title>\r\n                            Play - Quiz App\r\n                        </title>\r\n                    </Helmet>\r\n                    <Fragment>\r\n                        <audio ref={this.correctSound} src={correctNotification}></audio>\r\n                        <audio ref={this.wrongSound} src={wrongNotification}></audio>\r\n                        <audio ref={this.buttonSound} src={buttonNotification}></audio>\r\n                    </Fragment>\r\n                    <div className=\"questions\">\r\n                        <h2>Quiz Mode</h2>\r\n                        <div className=\"lifeline-container\">\r\n                            <p>\r\n                                <span onClick={this.handleFiftyFifty} className=\"mdi mdi-set-center mdi-24px lifeline-icon\">\r\n                                    <span className=\"lifeline\">{fiftyFifty}</span>\r\n                                </span>\r\n                            </p>\r\n                            <p>\r\n                                <span onClick={this.handleHints} className=\"mdi mdi-lightbulb-on-outline mdi-24px lifeline-icon\">\r\n                                    <span className=\"lifeline\">{hints}</span>\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"timer-container\">\r\n                            <p>\r\n                                <span className=\"left\" style={{ float: 'left' }}>{currentQuestionIndex + 1} of {numberOfQuestions}</span>\r\n                                <span className=\"right\">{time.minutes}:{time.seconds}<span className=\"mdi mdi-clock-outline mdi-24px lifeline-icon\"></span></span>\r\n                            </p>\r\n                        </div>\r\n                        <h5>{currentQuestion.question}</h5>\r\n                        <div className=\"options-container\">\r\n                            <p onClick={this.handleOptionClick}  className=\"option\">{currentQuestion.optionA}</p>\r\n                            <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionB}</p>\r\n                        </div>\r\n                        <div className=\"options-container\">\r\n                            <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionC}</p>\r\n                            <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionD}</p>\r\n                        </div>\r\n                        <div className=\"button-container\">\r\n                            <button\r\n                                className={classnames('', {'disabled': this.state.previousButtonDisabled})} \r\n                                id=\"previous-button\" \r\n                                onClick={this.handleButtonClick}>\r\n                                    Previous\r\n                            </button>\r\n                            <button\r\n                                className={classnames('', {'disabled': this.state.nextButtonDisabled})} \r\n                                id=\"next-button\" \r\n                                onClick={this.handleButtonClick}>\r\n                                    Next\r\n                            </button>\r\n                            <button \r\n                                id=\"quit-button\" \r\n                                onClick={this.handleButtonClick}>\r\n                                    Quit\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </Fragment>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Play\r\n","import React, { Component, Fragment } from 'react'\r\nimport Helmet from 'react-helmet';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport class QuizSummary extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            score: 0,\r\n            numberOfQuestions: 0,\r\n            numberOfAnsweredQuestions: 0,\r\n            correctAnswers: 0,\r\n            wrongAnswers: 0,\r\n            hintsUsed: 0,\r\n            fiftyFiftyUsed: 0\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { state } = this.props.location;\r\n        if(state) {\r\n            this.setState({\r\n                score: (state.score / state.numberOfQuestions) * 100,\r\n                numberOfQuestions: state.numberOfQuestions,\r\n                numberOfAnsweredQuestions: state.numberOfAnsweredQuestions,\r\n                correctAnswers: state.correctAnswers,\r\n                wrongAnswers: state.wrongAnswers,\r\n                hintsUsed: state.hintsUsed,\r\n                fiftyFiftyUsed: state.fiftyFiftyUsed\r\n            });\r\n        } \r\n    };\r\n\r\n    render() {\r\n        \r\n        const { state, score } = this.props.location;\r\n        let stats, remark;\r\n        const userScore = this.state.score;\r\n        \r\n        if(userScore <= 30) {\r\n            remark = \"You need more practice.\";\r\n        }\r\n        else if(userScore > 30 && userScore <= 50) {\r\n            remark = \"Better luck next time.\";   \r\n        }\r\n        else if(userScore <= 70 && userScore > 50) {\r\n            remark = \"You can do better.\";\r\n        }\r\n        else if(userScore <= 71 && userScore <= 84) {\r\n            remark = \"You did great.\";\r\n        }\r\n        else {\r\n            remark = \"You are an absolute genius.\";\r\n        }\r\n\r\n        if(state !== undefined) {\r\n            stats = (\r\n                <Fragment>\r\n                    <div >\r\n                        <span className=\"mdi mdi-check-circle-outline primary-icon\"></span>\r\n                    </div>\r\n                    <h1>Quiz has ended!</h1>\r\n                    <div className=\"container\">\r\n\r\n                        <h4>{remark}</h4>\r\n                        <h2>Your Score: {this.state.score.toFixed(0)}&#37;</h2>\r\n                        <span className=\"stat left\">Total number of questions: </span>\r\n                        <span className=\"right\">{this.state.numberOfQuestions}</span><br/>\r\n\r\n                        <span className=\"stat left\">Total number of attempted questions: </span>\r\n                        <span className=\"right\">{this.state.numberOfAnsweredQuestions}</span><br/>\r\n\r\n                        <span className=\"stat left\">Total number of correct answers: </span>\r\n                        <span className=\"right\">{this.state.correctAnswers}</span><br/>\r\n\r\n                        <span className=\"stat left\">Total number of wrong answers: </span>\r\n                        <span className=\"right\">{this.state.wrongAnswers}</span><br/>\r\n\r\n                        <span className=\"stat left\">Total number of used hints: </span>\r\n                        <span className=\"right\">{this.state.hintsUsed}</span><br/>\r\n\r\n                        <span className=\"stat left\">Total number of 50/50 used: </span>\r\n                        <span className=\"right\">{this.state.fiftyFiftyUsed}</span><br/>\r\n\r\n                    </div>\r\n                    <section className=\"links\">\r\n                        <ul>\r\n                            <li>\r\n                                <Link to=\"/\" className=\"button-link-bth\">Back to home?</Link>\r\n                                <Link to=\"/play/Quiz\" className=\"button-link-pa\">Play again?</Link>\r\n                            </li>\r\n                        </ul>\r\n                    </section>\r\n                </Fragment>\r\n            );\r\n        }\r\n        else {\r\n            stats = (\r\n                <section>\r\n                    <h1 className=\"no-stats\">No Statistics Available</h1>\r\n                    <ul>\r\n                        <li>\r\n                            <Link to=\"/\">Back to home?</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/play/quiz\">Start Game?</Link>\r\n                        </li>\r\n                    </ul>\r\n                </section>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n                <Helmet><title>Quiz Summary - Quiz App</title></Helmet>\r\n                {stats}\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuizSummary\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport QuizInstructions from './components/quiz/QuizInstructions';\nimport Play from './components/quiz/Play';\nimport QuizSummary from './components/quiz/QuizSummary';\n\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/\" exact component={Home}/>\n      <Route path=\"/play/instructions\" exact component={QuizInstructions} />\n      <Route path=\"/play/Quiz\" exact component={Play} />\n      <Route path=\"/play/QuizSummary\" exact component={QuizSummary} />\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/@mdi/font/css/materialdesignicons.min.css';\nimport '../node_modules/materialize-css/dist/css/materialize.min.css';\nimport '../node_modules/materialize-css/dist/js/materialize.min.js';\nimport './styles/styles.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}